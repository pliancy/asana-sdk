/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../types';
// @ts-ignore
import { InlineObject6 } from '../types';
// @ts-ignore
import { InlineObject7 } from '../types';
// @ts-ignore
import { InlineObject8 } from '../types';
// @ts-ignore
import { InlineResponse2001 } from '../types';
// @ts-ignore
import { InlineResponse2008 } from '../types';
// @ts-ignore
import { InlineResponse2009 } from '../types';
/**
 * GoalRelationshipsApi - axios parameter creator
 * @export
 */
export const GoalRelationshipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
         * @summary Add a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject7} inlineObject7 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSupportingRelationship: async (goalGid: string, inlineObject7: InlineObject7, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('addSupportingRelationship', 'goalGid', goalGid)
            // verify required parameter 'inlineObject7' is not null or undefined
            assertParamExists('addSupportingRelationship', 'inlineObject7', inlineObject7)
            const localVarPath = `/goals/{goal_gid}/addSupportingRelationship`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject7, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete updated goal relationship record for a single goal relationship.
         * @summary Get a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalRelationship: async (goalRelationshipGid: string, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalRelationshipGid' is not null or undefined
            assertParamExists('getGoalRelationship', 'goalRelationshipGid', goalRelationshipGid)
            const localVarPath = `/goal_relationships/{goal_relationship_gid}`
                .replace(`{${"goal_relationship_gid"}}`, encodeURIComponent(String(goalRelationshipGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns compact goal relationship records.
         * @summary Get goal relationships
         * @param {string} supportedGoal Globally unique identifier for the supported goal in the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [resourceSubtype] If provided, filter to goal relationships with a given resource_subtype.
         * @param {Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalRelationships: async (supportedGoal: string, optPretty?: boolean, limit?: number, offset?: string, resourceSubtype?: string, optFields?: Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supportedGoal' is not null or undefined
            assertParamExists('getGoalRelationships', 'supportedGoal', supportedGoal)
            const localVarPath = `/goal_relationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (supportedGoal !== undefined) {
                localVarQueryParameter['supported_goal'] = supportedGoal;
            }

            if (resourceSubtype !== undefined) {
                localVarQueryParameter['resource_subtype'] = resourceSubtype;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a goal relationship for a given parent goal.
         * @summary Removes a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject8} inlineObject8 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSupportingRelationship: async (goalGid: string, inlineObject8: InlineObject8, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('removeSupportingRelationship', 'goalGid', goalGid)
            // verify required parameter 'inlineObject8' is not null or undefined
            assertParamExists('removeSupportingRelationship', 'inlineObject8', inlineObject8)
            const localVarPath = `/goals/{goal_gid}/removeSupportingRelationship`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject8, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
         * @summary Update a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {InlineObject6} inlineObject6 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalRelationship: async (goalRelationshipGid: string, inlineObject6: InlineObject6, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalRelationshipGid' is not null or undefined
            assertParamExists('updateGoalRelationship', 'goalRelationshipGid', goalRelationshipGid)
            // verify required parameter 'inlineObject6' is not null or undefined
            assertParamExists('updateGoalRelationship', 'inlineObject6', inlineObject6)
            const localVarPath = `/goal_relationships/{goal_relationship_gid}`
                .replace(`{${"goal_relationship_gid"}}`, encodeURIComponent(String(goalRelationshipGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject6, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalRelationshipsApi - functional programming interface
 * @export
 */
export const GoalRelationshipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalRelationshipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
         * @summary Add a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject7} inlineObject7 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSupportingRelationship(goalGid: string, inlineObject7: InlineObject7, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSupportingRelationship(goalGid, inlineObject7, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete updated goal relationship record for a single goal relationship.
         * @summary Get a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoalRelationship(goalRelationshipGid: string, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoalRelationship(goalRelationshipGid, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns compact goal relationship records.
         * @summary Get goal relationships
         * @param {string} supportedGoal Globally unique identifier for the supported goal in the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [resourceSubtype] If provided, filter to goal relationships with a given resource_subtype.
         * @param {Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoalRelationships(supportedGoal: string, optPretty?: boolean, limit?: number, offset?: string, resourceSubtype?: string, optFields?: Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoalRelationships(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a goal relationship for a given parent goal.
         * @summary Removes a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject8} inlineObject8 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSupportingRelationship(goalGid: string, inlineObject8: InlineObject8, optPretty?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSupportingRelationship(goalGid, inlineObject8, optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
         * @summary Update a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {InlineObject6} inlineObject6 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGoalRelationship(goalRelationshipGid: string, inlineObject6: InlineObject6, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGoalRelationship(goalRelationshipGid, inlineObject6, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalRelationshipsApi - factory interface
 * @export
 */
export const GoalRelationshipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalRelationshipsApiFp(configuration)
    return {
        /**
         * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
         * @summary Add a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject7} inlineObject7 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSupportingRelationship(goalGid: string, inlineObject7: InlineObject7, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.addSupportingRelationship(goalGid, inlineObject7, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete updated goal relationship record for a single goal relationship.
         * @summary Get a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalRelationship(goalRelationshipGid: string, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.getGoalRelationship(goalRelationshipGid, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns compact goal relationship records.
         * @summary Get goal relationships
         * @param {string} supportedGoal Globally unique identifier for the supported goal in the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [resourceSubtype] If provided, filter to goal relationships with a given resource_subtype.
         * @param {Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalRelationships(supportedGoal: string, optPretty?: boolean, limit?: number, offset?: string, resourceSubtype?: string, optFields?: Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.getGoalRelationships(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a goal relationship for a given parent goal.
         * @summary Removes a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject8} inlineObject8 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSupportingRelationship(goalGid: string, inlineObject8: InlineObject8, optPretty?: boolean, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.removeSupportingRelationship(goalGid, inlineObject8, optPretty, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
         * @summary Update a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {InlineObject6} inlineObject6 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalRelationship(goalRelationshipGid: string, inlineObject6: InlineObject6, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.updateGoalRelationship(goalRelationshipGid, inlineObject6, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GoalRelationshipsApi - object-oriented interface
 * @export
 * @class GoalRelationshipsApi
 * @extends {BaseAPI}
 */
export class GoalRelationshipsApi extends BaseAPI {
    /**
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * @summary Add a supporting goal relationship
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {InlineObject7} inlineObject7 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApi
     */
    public addSupportingRelationship(goalGid: string, inlineObject7: InlineObject7, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).addSupportingRelationship(goalGid, inlineObject7, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete updated goal relationship record for a single goal relationship.
     * @summary Get a goal relationship
     * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApi
     */
    public getGoalRelationship(goalRelationshipGid: string, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).getGoalRelationship(goalRelationshipGid, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns compact goal relationship records.
     * @summary Get goal relationships
     * @param {string} supportedGoal Globally unique identifier for the supported goal in the goal relationship.
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
     * @param {string} [resourceSubtype] If provided, filter to goal relationships with a given resource_subtype.
     * @param {Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApi
     */
    public getGoalRelationships(supportedGoal: string, optPretty?: boolean, limit?: number, offset?: string, resourceSubtype?: string, optFields?: Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).getGoalRelationships(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a goal relationship for a given parent goal.
     * @summary Removes a supporting goal relationship
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {InlineObject8} inlineObject8 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApi
     */
    public removeSupportingRelationship(goalGid: string, inlineObject8: InlineObject8, optPretty?: boolean, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).removeSupportingRelationship(goalGid, inlineObject8, optPretty, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * @summary Update a goal relationship
     * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
     * @param {InlineObject6} inlineObject6 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApi
     */
    public updateGoalRelationship(goalRelationshipGid: string, inlineObject6: InlineObject6, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).updateGoalRelationship(goalRelationshipGid, inlineObject6, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }
}
