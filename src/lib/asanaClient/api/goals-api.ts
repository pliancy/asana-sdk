/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../types';
// @ts-ignore
import { InlineObject10 } from '../types';
// @ts-ignore
import { InlineObject11 } from '../types';
// @ts-ignore
import { InlineObject12 } from '../types';
// @ts-ignore
import { InlineObject13 } from '../types';
// @ts-ignore
import { InlineObject14 } from '../types';
// @ts-ignore
import { InlineObject9 } from '../types';
// @ts-ignore
import { InlineResponse2001 } from '../types';
// @ts-ignore
import { InlineResponse20010 } from '../types';
// @ts-ignore
import { InlineResponse20011 } from '../types';
// @ts-ignore
import { InlineResponse20012 } from '../types';
/**
 * GoalsApi - axios parameter creator
 * @export
 */
export const GoalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Add a collaborator to a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject13} inlineObject13 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFollowers: async (goalGid: string, inlineObject13: InlineObject13, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('addFollowers', 'goalGid', goalGid)
            // verify required parameter 'inlineObject13' is not null or undefined
            assertParamExists('addFollowers', 'inlineObject13', inlineObject13)
            const localVarPath = `/goals/{goal_gid}/addFollowers`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject13, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
         * @summary Create a goal
         * @param {InlineObject10} inlineObject10 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGoal: async (inlineObject10: InlineObject10, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject10' is not null or undefined
            assertParamExists('createGoal', 'inlineObject10', inlineObject10)
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject10, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         * @summary Create a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject11} inlineObject11 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGoalMetric: async (goalGid: string, inlineObject11: InlineObject11, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('createGoalMetric', 'goalGid', goalGid)
            // verify required parameter 'inlineObject11' is not null or undefined
            assertParamExists('createGoalMetric', 'inlineObject11', inlineObject11)
            const localVarPath = `/goals/{goal_gid}/setMetric`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject11, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
         * @summary Delete a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGoal: async (goalGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('deleteGoal', 'goalGid', goalGid)
            const localVarPath = `/goals/{goal_gid}`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete goal record for a single goal.
         * @summary Get a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoal: async (goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('getGoal', 'goalGid', goalGid)
            const localVarPath = `/goals/{goal_gid}`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns compact goal records.
         * @summary Get goals
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {string} [portfolio] Globally unique identifier for supporting portfolio.
         * @param {string} [project] Globally unique identifier for supporting project.
         * @param {boolean} [isWorkspaceLevel] Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
         * @param {string} [team] Globally unique identifier for the team.
         * @param {string} [workspace] Globally unique identifier for the workspace.
         * @param {Array<string>} [timePeriods] Globally unique identifiers for the time periods.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoals: async (optPretty?: boolean, portfolio?: string, project?: string, isWorkspaceLevel?: boolean, team?: string, workspace?: string, timePeriods?: Array<string>, limit?: number, offset?: string, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (portfolio !== undefined) {
                localVarQueryParameter['portfolio'] = portfolio;
            }

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (isWorkspaceLevel !== undefined) {
                localVarQueryParameter['is_workspace_level'] = isWorkspaceLevel;
            }

            if (team !== undefined) {
                localVarQueryParameter['team'] = team;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (timePeriods) {
                localVarQueryParameter['time_periods'] = timePeriods;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a compact representation of all of the parent goals of a goal.
         * @summary Get parent goals from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentGoalsForGoal: async (goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('getParentGoalsForGoal', 'goalGid', goalGid)
            const localVarPath = `/goals/{goal_gid}/parentGoals`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Remove a collaborator from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject14} inlineObject14 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFollowers: async (goalGid: string, inlineObject14: InlineObject14, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('removeFollowers', 'goalGid', goalGid)
            // verify required parameter 'inlineObject14' is not null or undefined
            assertParamExists('removeFollowers', 'inlineObject14', inlineObject14)
            const localVarPath = `/goals/{goal_gid}/removeFollowers`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject14, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
         * @summary Update a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject9} inlineObject9 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoal: async (goalGid: string, inlineObject9: InlineObject9, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('updateGoal', 'goalGid', goalGid)
            // verify required parameter 'inlineObject9' is not null or undefined
            assertParamExists('updateGoal', 'inlineObject9', inlineObject9)
            const localVarPath = `/goals/{goal_gid}`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject9, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
         * @summary Update a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject12} inlineObject12 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalMetric: async (goalGid: string, inlineObject12: InlineObject12, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('updateGoalMetric', 'goalGid', goalGid)
            // verify required parameter 'inlineObject12' is not null or undefined
            assertParamExists('updateGoalMetric', 'inlineObject12', inlineObject12)
            const localVarPath = `/goals/{goal_gid}/setMetricCurrentValue`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject12, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalsApi - functional programming interface
 * @export
 */
export const GoalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Add a collaborator to a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject13} inlineObject13 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFollowers(goalGid: string, inlineObject13: InlineObject13, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFollowers(goalGid, inlineObject13, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
         * @summary Create a goal
         * @param {InlineObject10} inlineObject10 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGoal(inlineObject10: InlineObject10, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGoal(inlineObject10, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         * @summary Create a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject11} inlineObject11 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGoalMetric(goalGid: string, inlineObject11: InlineObject11, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGoalMetric(goalGid, inlineObject11, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
         * @summary Delete a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGoal(goalGid: string, optPretty?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGoal(goalGid, optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete goal record for a single goal.
         * @summary Get a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoal(goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoal(goalGid, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns compact goal records.
         * @summary Get goals
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {string} [portfolio] Globally unique identifier for supporting portfolio.
         * @param {string} [project] Globally unique identifier for supporting project.
         * @param {boolean} [isWorkspaceLevel] Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
         * @param {string} [team] Globally unique identifier for the team.
         * @param {string} [workspace] Globally unique identifier for the workspace.
         * @param {Array<string>} [timePeriods] Globally unique identifiers for the time periods.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoals(optPretty?: boolean, portfolio?: string, project?: string, isWorkspaceLevel?: boolean, team?: string, workspace?: string, timePeriods?: Array<string>, limit?: number, offset?: string, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoals(optPretty, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a compact representation of all of the parent goals of a goal.
         * @summary Get parent goals from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParentGoalsForGoal(goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParentGoalsForGoal(goalGid, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Remove a collaborator from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject14} inlineObject14 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFollowers(goalGid: string, inlineObject14: InlineObject14, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFollowers(goalGid, inlineObject14, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
         * @summary Update a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject9} inlineObject9 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGoal(goalGid: string, inlineObject9: InlineObject9, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGoal(goalGid, inlineObject9, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
         * @summary Update a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject12} inlineObject12 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGoalMetric(goalGid: string, inlineObject12: InlineObject12, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGoalMetric(goalGid, inlineObject12, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalsApi - factory interface
 * @export
 */
export const GoalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalsApiFp(configuration)
    return {
        /**
         * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Add a collaborator to a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject13} inlineObject13 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFollowers(goalGid: string, inlineObject13: InlineObject13, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.addFollowers(goalGid, inlineObject13, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
         * @summary Create a goal
         * @param {InlineObject10} inlineObject10 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGoal(inlineObject10: InlineObject10, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.createGoal(inlineObject10, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         * @summary Create a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject11} inlineObject11 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGoalMetric(goalGid: string, inlineObject11: InlineObject11, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.createGoalMetric(goalGid, inlineObject11, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
         * @summary Delete a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGoal(goalGid: string, optPretty?: boolean, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.deleteGoal(goalGid, optPretty, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete goal record for a single goal.
         * @summary Get a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoal(goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.getGoal(goalGid, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns compact goal records.
         * @summary Get goals
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {string} [portfolio] Globally unique identifier for supporting portfolio.
         * @param {string} [project] Globally unique identifier for supporting project.
         * @param {boolean} [isWorkspaceLevel] Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
         * @param {string} [team] Globally unique identifier for the team.
         * @param {string} [workspace] Globally unique identifier for the workspace.
         * @param {Array<string>} [timePeriods] Globally unique identifiers for the time periods.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoals(optPretty?: boolean, portfolio?: string, project?: string, isWorkspaceLevel?: boolean, team?: string, workspace?: string, timePeriods?: Array<string>, limit?: number, offset?: string, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.getGoals(optPretty, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a compact representation of all of the parent goals of a goal.
         * @summary Get parent goals from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentGoalsForGoal(goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20012> {
            return localVarFp.getParentGoalsForGoal(goalGid, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Remove a collaborator from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject14} inlineObject14 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFollowers(goalGid: string, inlineObject14: InlineObject14, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.removeFollowers(goalGid, inlineObject14, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
         * @summary Update a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject9} inlineObject9 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoal(goalGid: string, inlineObject9: InlineObject9, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.updateGoal(goalGid, inlineObject9, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
         * @summary Update a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {InlineObject12} inlineObject12 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalMetric(goalGid: string, inlineObject12: InlineObject12, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.updateGoalMetric(goalGid, inlineObject12, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GoalsApi - object-oriented interface
 * @export
 * @class GoalsApi
 * @extends {BaseAPI}
 */
export class GoalsApi extends BaseAPI {
    /**
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @summary Add a collaborator to a goal
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {InlineObject13} inlineObject13 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public addFollowers(goalGid: string, inlineObject13: InlineObject13, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).addFollowers(goalGid, inlineObject13, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * @summary Create a goal
     * @param {InlineObject10} inlineObject10 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public createGoal(inlineObject10: InlineObject10, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).createGoal(inlineObject10, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * @summary Create a goal metric
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {InlineObject11} inlineObject11 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public createGoalMetric(goalGid: string, inlineObject11: InlineObject11, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).createGoalMetric(goalGid, inlineObject11, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * @summary Delete a goal
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public deleteGoal(goalGid: string, optPretty?: boolean, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).deleteGoal(goalGid, optPretty, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete goal record for a single goal.
     * @summary Get a goal
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public getGoal(goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getGoal(goalGid, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns compact goal records.
     * @summary Get goals
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {string} [portfolio] Globally unique identifier for supporting portfolio.
     * @param {string} [project] Globally unique identifier for supporting project.
     * @param {boolean} [isWorkspaceLevel] Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
     * @param {string} [team] Globally unique identifier for the team.
     * @param {string} [workspace] Globally unique identifier for the workspace.
     * @param {Array<string>} [timePeriods] Globally unique identifiers for the time periods.
     * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public getGoals(optPretty?: boolean, portfolio?: string, project?: string, isWorkspaceLevel?: boolean, team?: string, workspace?: string, timePeriods?: Array<string>, limit?: number, offset?: string, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getGoals(optPretty, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a compact representation of all of the parent goals of a goal.
     * @summary Get parent goals from a goal
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public getParentGoalsForGoal(goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getParentGoalsForGoal(goalGid, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @summary Remove a collaborator from a goal
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {InlineObject14} inlineObject14 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public removeFollowers(goalGid: string, inlineObject14: InlineObject14, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).removeFollowers(goalGid, inlineObject14, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * @summary Update a goal
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {InlineObject9} inlineObject9 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public updateGoal(goalGid: string, inlineObject9: InlineObject9, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateGoal(goalGid, inlineObject9, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * @summary Update a goal metric
     * @param {string} goalGid Globally unique identifier for the goal.
     * @param {InlineObject12} inlineObject12 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public updateGoalMetric(goalGid: string, inlineObject12: InlineObject12, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateGoalMetric(goalGid, inlineObject12, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }
}
