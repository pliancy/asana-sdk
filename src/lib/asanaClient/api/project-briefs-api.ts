/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../types';
// @ts-ignore
import { InlineObject24 } from '../types';
// @ts-ignore
import { InlineObject25 } from '../types';
// @ts-ignore
import { InlineResponse2001 } from '../types';
// @ts-ignore
import { InlineResponse20018 } from '../types';
/**
 * ProjectBriefsApi - axios parameter creator
 * @export
 */
export const ProjectBriefsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new project brief.  Returns the full record of the newly created project brief.
         * @summary Create a project brief
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {InlineObject25} inlineObject25 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectBrief: async (projectGid: string, inlineObject25: InlineObject25, optPretty?: boolean, optFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectGid' is not null or undefined
            assertParamExists('createProjectBrief', 'projectGid', projectGid)
            // verify required parameter 'inlineObject25' is not null or undefined
            assertParamExists('createProjectBrief', 'inlineObject25', inlineObject25)
            const localVarPath = `/projects/{project_gid}/project_briefs`
                .replace(`{${"project_gid"}}`, encodeURIComponent(String(projectGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject25, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific, existing project brief.  Returns an empty data record.
         * @summary Delete a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectBrief: async (projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectBriefGid' is not null or undefined
            assertParamExists('deleteProjectBrief', 'projectBriefGid', projectBriefGid)
            const localVarPath = `/project_briefs/{project_brief_gid}`
                .replace(`{${"project_brief_gid"}}`, encodeURIComponent(String(projectBriefGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full record for a project brief.
         * @summary Get a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBrief: async (projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectBriefGid' is not null or undefined
            assertParamExists('getProjectBrief', 'projectBriefGid', projectBriefGid)
            const localVarPath = `/project_briefs/{project_brief_gid}`
                .replace(`{${"project_brief_gid"}}`, encodeURIComponent(String(projectBriefGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
         * @summary Update a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {InlineObject24} inlineObject24 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectBrief: async (projectBriefGid: string, inlineObject24: InlineObject24, optPretty?: boolean, optFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectBriefGid' is not null or undefined
            assertParamExists('updateProjectBrief', 'projectBriefGid', projectBriefGid)
            // verify required parameter 'inlineObject24' is not null or undefined
            assertParamExists('updateProjectBrief', 'inlineObject24', inlineObject24)
            const localVarPath = `/project_briefs/{project_brief_gid}`
                .replace(`{${"project_brief_gid"}}`, encodeURIComponent(String(projectBriefGid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject24, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectBriefsApi - functional programming interface
 * @export
 */
export const ProjectBriefsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectBriefsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new project brief.  Returns the full record of the newly created project brief.
         * @summary Create a project brief
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {InlineObject25} inlineObject25 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectBrief(projectGid: string, inlineObject25: InlineObject25, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectBrief(projectGid, inlineObject25, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a specific, existing project brief.  Returns an empty data record.
         * @summary Delete a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectBrief(projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectBrief(projectBriefGid, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the full record for a project brief.
         * @summary Get a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectBrief(projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectBrief(projectBriefGid, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
         * @summary Update a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {InlineObject24} inlineObject24 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectBrief(projectBriefGid: string, inlineObject24: InlineObject24, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectBrief(projectBriefGid, inlineObject24, optPretty, optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectBriefsApi - factory interface
 * @export
 */
export const ProjectBriefsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectBriefsApiFp(configuration)
    return {
        /**
         * Creates a new project brief.  Returns the full record of the newly created project brief.
         * @summary Create a project brief
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {InlineObject25} inlineObject25 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectBrief(projectGid: string, inlineObject25: InlineObject25, optPretty?: boolean, optFields?: Array<string>, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.createProjectBrief(projectGid, inlineObject25, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific, existing project brief.  Returns an empty data record.
         * @summary Delete a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectBrief(projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.deleteProjectBrief(projectBriefGid, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full record for a project brief.
         * @summary Get a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBrief(projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.getProjectBrief(projectBriefGid, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
         * @summary Update a project brief
         * @param {string} projectBriefGid Globally unique identifier for the project brief.
         * @param {InlineObject24} inlineObject24 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectBrief(projectBriefGid: string, inlineObject24: InlineObject24, optPretty?: boolean, optFields?: Array<string>, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.updateProjectBrief(projectBriefGid, inlineObject24, optPretty, optFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectBriefsApi - object-oriented interface
 * @export
 * @class ProjectBriefsApi
 * @extends {BaseAPI}
 */
export class ProjectBriefsApi extends BaseAPI {
    /**
     * Creates a new project brief.  Returns the full record of the newly created project brief.
     * @summary Create a project brief
     * @param {string} projectGid Globally unique identifier for the project.
     * @param {InlineObject25} inlineObject25 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectBriefsApi
     */
    public createProjectBrief(projectGid: string, inlineObject25: InlineObject25, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig) {
        return ProjectBriefsApiFp(this.configuration).createProjectBrief(projectGid, inlineObject25, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific, existing project brief.  Returns an empty data record.
     * @summary Delete a project brief
     * @param {string} projectBriefGid Globally unique identifier for the project brief.
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectBriefsApi
     */
    public deleteProjectBrief(projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig) {
        return ProjectBriefsApiFp(this.configuration).deleteProjectBrief(projectBriefGid, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the full record for a project brief.
     * @summary Get a project brief
     * @param {string} projectBriefGid Globally unique identifier for the project brief.
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectBriefsApi
     */
    public getProjectBrief(projectBriefGid: string, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig) {
        return ProjectBriefsApiFp(this.configuration).getProjectBrief(projectBriefGid, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
     * @summary Update a project brief
     * @param {string} projectBriefGid Globally unique identifier for the project brief.
     * @param {InlineObject24} inlineObject24 
     * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array<string>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectBriefsApi
     */
    public updateProjectBrief(projectBriefGid: string, inlineObject24: InlineObject24, optPretty?: boolean, optFields?: Array<string>, options?: AxiosRequestConfig) {
        return ProjectBriefsApiFp(this.configuration).updateProjectBrief(projectBriefGid, inlineObject24, optPretty, optFields, options).then((request) => request(this.axios, this.basePath));
    }
}
